{
	"$schema": "https://raw.githubusercontent.com/nicolascoutochaves/ufrgs-asm/master/syntaxes/ufrgs-asm.json",
  "scopeName": "source.arm",
  "name": "UFRGS Assembly",
  "fileTypes": [
    "ced",
    "rad",
    "ahd"
  ],
  "patterns": [
    {
      "match": "\b(equ|db|dab|dw|daw)\b",
      "name": "meta.preprocessor"
    },
    {
      "match": "*:|jsr ?? *",
      "name": "routine.asm"
    },
    {
      "match": "\b(cesar instructions here)\b",
      "name": "support.function.mnemonic.arithmetic.asm",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#conditions",
              "name": "support.function.mnemonic.arithmetic.arm"
            },
            {
              "match": "\\w{2}",
              "name": "invalid.illegal.condition.arm"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#conditions",
              "name": "support.function.mnemonic.arithmetic.arm"
            },
            {
              "match": "\\w{2}",
              "name": "invalid.illegal.condition.arm"
            }
          ]
        }
      }
    }, 
    {
      "name": "storage.memaddress.arm",
      "match": "\\[[ \\t]*(\\w+),[ \\t]*([a-zA-Z0-9#-_]+)[ \\t]*\\]!?",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#registers"
            }
          ]
        },
        "2": {
          "patterns": [
            {
              "include": "#numerics"
            },
            {
              "include": "#registers"
            },
            {
              "include": "#variables"
            }
          ]
        }
      }
    },
    {
      "name": "storage.stack.arm",
      "begin": "\\{\\h*",
      "end": "\\h*\\}\\^?",
      "patterns": [
        {
          "include": "#registers_list"
        }
      ]
    },
    {
      "include": "#registers"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#numerics"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#comments"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "match": "([;@]|//|#).*$",
          "name": "comment.arm"
        },
        {
          "begin": "\\/\\*",
          "beginCaptures": {
            "0": {
              "name": "comment.begin.arm"
            }
          },
          "endCaptures": {
            "0": {
              "name": "comment.end.arm"
            }
          },
          "end": "\\*\\/",
          "name": "comment.arm"
        }
      ]
    },
    "conditions": {
      "patterns": [
        {
          "match": "ne|eq|cs|hs|cc|lo|mi|pl|vs|vc|hi|ls|lt|le|gt|ge|al"
        }
      ]
    },
    "numerics": {
      "patterns": [
        {
          "match": "#?-?(0x|&)[0-9a-fA-F_]+\\b",
          "name": "constant.numeric.hex.arm"
        },
        {
          "match": "#?[0-9]+\\b",
          "name": "constant.numeric.dec.arm"
        },
        {
          "match": "#?0b[01]+\\b",
          "name": "constant.numeric.bin.arm"
        }
      ]
    },
    "registers": {
      "patterns": [
        {
          "match": "\\b(?i)([rcp]([0-9]|1[0-5])|[xwbhsdq]([0-9]|1[0-9]|2[0-9]|3[0-1])|wzr|xzr|wsp|fpsr|fpcr|a[1-4]|v([0-9]|1[0-9]|2[0-9]|3[0-1])\\.(16b|8[b|h]|4[s|h]|2[s|d])|sl|sb|fp|ip|sp|lr|(c|s)psr(_c)?|pc|fpsid|fpscr|fpexc|APSR_nzcv|sy)(?-i)(!|\\b)",
          "name": "storage.register.arm"
        }
      ]
    },
    "registers_list": {
      "patterns": [
        {
          "match": "(\\w+)(?:\\h*\\-\\h*(\\w+))?(?:,\\h*([a-zA-Z0-9,\\-\\h]+))?",
          "captures": {
            "1": {
              "patterns": [
                {
                  "include": "#registers"
                }
              ]
            },
            "2": {
              "patterns": [
                {
                  "include": "#registers"
                }
              ]
            },
            "3": {
              "patterns": [
                {
                  "include": "#registers_list"
                }
              ]
            }
          }
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.arm",
          "begin": "\"",
          "end": "\""
        },
        {
          "match": "\\'\\S\\'",
          "name": "string.char.arm"
        },
        {
          "name": "invalid.illegal.string.arm",
          "match": "\"[^\"]+$"
        },
        {
          "name": "invalid.illegal.char.arm",
          "match": "\\'\\S{2,}\\'"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "match": "(\\b|#)-?[a-zA-Z_][0-9a-zA-Z_]*\\b",
          "name": "variable.named.arm"
        }
      ]
    }
  }
}
